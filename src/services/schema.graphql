schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

type AvatarUploadResult {
  url: String!
}

# columns and relationships of "businesses"
type businesses {
  id: Int!
  name: String!
}

# aggregated selection of "businesses"
type businesses_aggregate {
  aggregate: businesses_aggregate_fields
  nodes: [businesses!]!
}

# aggregate fields of "businesses"
type businesses_aggregate_fields {
  avg: businesses_avg_fields
  count(columns: [businesses_select_column!], distinct: Boolean): Int
  max: businesses_max_fields
  min: businesses_min_fields
  stddev: businesses_stddev_fields
  stddev_pop: businesses_stddev_pop_fields
  stddev_samp: businesses_stddev_samp_fields
  sum: businesses_sum_fields
  var_pop: businesses_var_pop_fields
  var_samp: businesses_var_samp_fields
  variance: businesses_variance_fields
}

# order by aggregate values of table "businesses"
input businesses_aggregate_order_by {
  avg: businesses_avg_order_by
  count: order_by
  max: businesses_max_order_by
  min: businesses_min_order_by
  stddev: businesses_stddev_order_by
  stddev_pop: businesses_stddev_pop_order_by
  stddev_samp: businesses_stddev_samp_order_by
  sum: businesses_sum_order_by
  var_pop: businesses_var_pop_order_by
  var_samp: businesses_var_samp_order_by
  variance: businesses_variance_order_by
}

# input type for inserting array relation for remote table "businesses"
input businesses_arr_rel_insert_input {
  data: [businesses_insert_input!]!
  on_conflict: businesses_on_conflict
}

# aggregate avg on columns
type businesses_avg_fields {
  id: Float
}

# order by avg() on columns of table "businesses"
input businesses_avg_order_by {
  id: order_by
}

# Boolean expression to filter rows from the table "businesses". All fields are combined with a logical 'AND'.
input businesses_bool_exp {
  _and: [businesses_bool_exp]
  _not: businesses_bool_exp
  _or: [businesses_bool_exp]
  id: Int_comparison_exp
  name: String_comparison_exp
}

# unique or primary key constraints on table "businesses"
enum businesses_constraint {
  # unique or primary key constraint
  businesses_pkey
}

# input type for incrementing integer column in table "businesses"
input businesses_inc_input {
  id: Int
}

# input type for inserting data into table "businesses"
input businesses_insert_input {
  id: Int
  name: String
}

# aggregate max on columns
type businesses_max_fields {
  id: Int
  name: String
}

# order by max() on columns of table "businesses"
input businesses_max_order_by {
  id: order_by
  name: order_by
}

# aggregate min on columns
type businesses_min_fields {
  id: Int
  name: String
}

# order by min() on columns of table "businesses"
input businesses_min_order_by {
  id: order_by
  name: order_by
}

# response of any mutation on the table "businesses"
type businesses_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [businesses!]!
}

# input type for inserting object relation for remote table "businesses"
input businesses_obj_rel_insert_input {
  data: businesses_insert_input!
  on_conflict: businesses_on_conflict
}

# on conflict condition type for table "businesses"
input businesses_on_conflict {
  constraint: businesses_constraint!
  update_columns: [businesses_update_column!]!
  where: businesses_bool_exp
}

# ordering options when selecting data from "businesses"
input businesses_order_by {
  id: order_by
  name: order_by
}

# primary key columns input for table: "businesses"
input businesses_pk_columns_input {
  id: Int!
}

# select columns of table "businesses"
enum businesses_select_column {
  # column name
  id

  # column name
  name
}

# input type for updating data in table "businesses"
input businesses_set_input {
  id: Int
  name: String
}

# aggregate stddev on columns
type businesses_stddev_fields {
  id: Float
}

# order by stddev() on columns of table "businesses"
input businesses_stddev_order_by {
  id: order_by
}

# aggregate stddev_pop on columns
type businesses_stddev_pop_fields {
  id: Float
}

# order by stddev_pop() on columns of table "businesses"
input businesses_stddev_pop_order_by {
  id: order_by
}

# aggregate stddev_samp on columns
type businesses_stddev_samp_fields {
  id: Float
}

# order by stddev_samp() on columns of table "businesses"
input businesses_stddev_samp_order_by {
  id: order_by
}

# aggregate sum on columns
type businesses_sum_fields {
  id: Int
}

# order by sum() on columns of table "businesses"
input businesses_sum_order_by {
  id: order_by
}

# update columns of table "businesses"
enum businesses_update_column {
  # column name
  id

  # column name
  name
}

# aggregate var_pop on columns
type businesses_var_pop_fields {
  id: Float
}

# order by var_pop() on columns of table "businesses"
input businesses_var_pop_order_by {
  id: order_by
}

# aggregate var_samp on columns
type businesses_var_samp_fields {
  id: Float
}

# order by var_samp() on columns of table "businesses"
input businesses_var_samp_order_by {
  id: order_by
}

# aggregate variance on columns
type businesses_variance_fields {
  id: Float
}

# order by variance() on columns of table "businesses"
input businesses_variance_order_by {
  id: order_by
}

# columns and relationships of "clients"
type clients {
  firstName: String!
  id: Int!
  lastName: String!
  phone: String
  photo: String
}

# aggregated selection of "clients"
type clients_aggregate {
  aggregate: clients_aggregate_fields
  nodes: [clients!]!
}

# aggregate fields of "clients"
type clients_aggregate_fields {
  avg: clients_avg_fields
  count(columns: [clients_select_column!], distinct: Boolean): Int
  max: clients_max_fields
  min: clients_min_fields
  stddev: clients_stddev_fields
  stddev_pop: clients_stddev_pop_fields
  stddev_samp: clients_stddev_samp_fields
  sum: clients_sum_fields
  var_pop: clients_var_pop_fields
  var_samp: clients_var_samp_fields
  variance: clients_variance_fields
}

# order by aggregate values of table "clients"
input clients_aggregate_order_by {
  avg: clients_avg_order_by
  count: order_by
  max: clients_max_order_by
  min: clients_min_order_by
  stddev: clients_stddev_order_by
  stddev_pop: clients_stddev_pop_order_by
  stddev_samp: clients_stddev_samp_order_by
  sum: clients_sum_order_by
  var_pop: clients_var_pop_order_by
  var_samp: clients_var_samp_order_by
  variance: clients_variance_order_by
}

# input type for inserting array relation for remote table "clients"
input clients_arr_rel_insert_input {
  data: [clients_insert_input!]!
  on_conflict: clients_on_conflict
}

# aggregate avg on columns
type clients_avg_fields {
  id: Float
}

# order by avg() on columns of table "clients"
input clients_avg_order_by {
  id: order_by
}

# Boolean expression to filter rows from the table "clients". All fields are combined with a logical 'AND'.
input clients_bool_exp {
  _and: [clients_bool_exp]
  _not: clients_bool_exp
  _or: [clients_bool_exp]
  firstName: String_comparison_exp
  id: Int_comparison_exp
  lastName: String_comparison_exp
  phone: String_comparison_exp
  photo: String_comparison_exp
}

# unique or primary key constraints on table "clients"
enum clients_constraint {
  # unique or primary key constraint
  clients_pkey
}

# input type for incrementing integer column in table "clients"
input clients_inc_input {
  id: Int
}

# input type for inserting data into table "clients"
input clients_insert_input {
  firstName: String
  id: Int
  lastName: String
  phone: String
  photo: String
}

# aggregate max on columns
type clients_max_fields {
  firstName: String
  id: Int
  lastName: String
  phone: String
  photo: String
}

# order by max() on columns of table "clients"
input clients_max_order_by {
  firstName: order_by
  id: order_by
  lastName: order_by
  phone: order_by
  photo: order_by
}

# aggregate min on columns
type clients_min_fields {
  firstName: String
  id: Int
  lastName: String
  phone: String
  photo: String
}

# order by min() on columns of table "clients"
input clients_min_order_by {
  firstName: order_by
  id: order_by
  lastName: order_by
  phone: order_by
  photo: order_by
}

# response of any mutation on the table "clients"
type clients_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [clients!]!
}

# input type for inserting object relation for remote table "clients"
input clients_obj_rel_insert_input {
  data: clients_insert_input!
  on_conflict: clients_on_conflict
}

# on conflict condition type for table "clients"
input clients_on_conflict {
  constraint: clients_constraint!
  update_columns: [clients_update_column!]!
  where: clients_bool_exp
}

# ordering options when selecting data from "clients"
input clients_order_by {
  firstName: order_by
  id: order_by
  lastName: order_by
  phone: order_by
  photo: order_by
}

# primary key columns input for table: "clients"
input clients_pk_columns_input {
  id: Int!
}

# select columns of table "clients"
enum clients_select_column {
  # column name
  firstName

  # column name
  id

  # column name
  lastName

  # column name
  phone

  # column name
  photo
}

# input type for updating data in table "clients"
input clients_set_input {
  firstName: String
  id: Int
  lastName: String
  phone: String
  photo: String
}

# aggregate stddev on columns
type clients_stddev_fields {
  id: Float
}

# order by stddev() on columns of table "clients"
input clients_stddev_order_by {
  id: order_by
}

# aggregate stddev_pop on columns
type clients_stddev_pop_fields {
  id: Float
}

# order by stddev_pop() on columns of table "clients"
input clients_stddev_pop_order_by {
  id: order_by
}

# aggregate stddev_samp on columns
type clients_stddev_samp_fields {
  id: Float
}

# order by stddev_samp() on columns of table "clients"
input clients_stddev_samp_order_by {
  id: order_by
}

# aggregate sum on columns
type clients_sum_fields {
  id: Int
}

# order by sum() on columns of table "clients"
input clients_sum_order_by {
  id: order_by
}

# update columns of table "clients"
enum clients_update_column {
  # column name
  firstName

  # column name
  id

  # column name
  lastName

  # column name
  phone

  # column name
  photo
}

# aggregate var_pop on columns
type clients_var_pop_fields {
  id: Float
}

# order by var_pop() on columns of table "clients"
input clients_var_pop_order_by {
  id: order_by
}

# aggregate var_samp on columns
type clients_var_samp_fields {
  id: Float
}

# order by var_samp() on columns of table "clients"
input clients_var_samp_order_by {
  id: order_by
}

# aggregate variance on columns
type clients_variance_fields {
  id: Float
}

# order by variance() on columns of table "clients"
input clients_variance_order_by {
  id: order_by
}

# columns and relationships of "employees"
type employees {
  firstName: String!
  id: Int!
  lastName: String!
  phone: String
  photo: String
}

# aggregated selection of "employees"
type employees_aggregate {
  aggregate: employees_aggregate_fields
  nodes: [employees!]!
}

# aggregate fields of "employees"
type employees_aggregate_fields {
  avg: employees_avg_fields
  count(columns: [employees_select_column!], distinct: Boolean): Int
  max: employees_max_fields
  min: employees_min_fields
  stddev: employees_stddev_fields
  stddev_pop: employees_stddev_pop_fields
  stddev_samp: employees_stddev_samp_fields
  sum: employees_sum_fields
  var_pop: employees_var_pop_fields
  var_samp: employees_var_samp_fields
  variance: employees_variance_fields
}

# order by aggregate values of table "employees"
input employees_aggregate_order_by {
  avg: employees_avg_order_by
  count: order_by
  max: employees_max_order_by
  min: employees_min_order_by
  stddev: employees_stddev_order_by
  stddev_pop: employees_stddev_pop_order_by
  stddev_samp: employees_stddev_samp_order_by
  sum: employees_sum_order_by
  var_pop: employees_var_pop_order_by
  var_samp: employees_var_samp_order_by
  variance: employees_variance_order_by
}

# input type for inserting array relation for remote table "employees"
input employees_arr_rel_insert_input {
  data: [employees_insert_input!]!
  on_conflict: employees_on_conflict
}

# aggregate avg on columns
type employees_avg_fields {
  id: Float
}

# order by avg() on columns of table "employees"
input employees_avg_order_by {
  id: order_by
}

# Boolean expression to filter rows from the table "employees". All fields are combined with a logical 'AND'.
input employees_bool_exp {
  _and: [employees_bool_exp]
  _not: employees_bool_exp
  _or: [employees_bool_exp]
  firstName: String_comparison_exp
  id: Int_comparison_exp
  lastName: String_comparison_exp
  phone: String_comparison_exp
  photo: String_comparison_exp
}

# unique or primary key constraints on table "employees"
enum employees_constraint {
  # unique or primary key constraint
  employees_pkey
}

# input type for incrementing integer column in table "employees"
input employees_inc_input {
  id: Int
}

# input type for inserting data into table "employees"
input employees_insert_input {
  firstName: String
  id: Int
  lastName: String
  phone: String
  photo: String
}

# aggregate max on columns
type employees_max_fields {
  firstName: String
  id: Int
  lastName: String
  phone: String
  photo: String
}

# order by max() on columns of table "employees"
input employees_max_order_by {
  firstName: order_by
  id: order_by
  lastName: order_by
  phone: order_by
  photo: order_by
}

# aggregate min on columns
type employees_min_fields {
  firstName: String
  id: Int
  lastName: String
  phone: String
  photo: String
}

# order by min() on columns of table "employees"
input employees_min_order_by {
  firstName: order_by
  id: order_by
  lastName: order_by
  phone: order_by
  photo: order_by
}

# response of any mutation on the table "employees"
type employees_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [employees!]!
}

# input type for inserting object relation for remote table "employees"
input employees_obj_rel_insert_input {
  data: employees_insert_input!
  on_conflict: employees_on_conflict
}

# on conflict condition type for table "employees"
input employees_on_conflict {
  constraint: employees_constraint!
  update_columns: [employees_update_column!]!
  where: employees_bool_exp
}

# ordering options when selecting data from "employees"
input employees_order_by {
  firstName: order_by
  id: order_by
  lastName: order_by
  phone: order_by
  photo: order_by
}

# primary key columns input for table: "employees"
input employees_pk_columns_input {
  id: Int!
}

# select columns of table "employees"
enum employees_select_column {
  # column name
  firstName

  # column name
  id

  # column name
  lastName

  # column name
  phone

  # column name
  photo
}

# input type for updating data in table "employees"
input employees_set_input {
  firstName: String
  id: Int
  lastName: String
  phone: String
  photo: String
}

# aggregate stddev on columns
type employees_stddev_fields {
  id: Float
}

# order by stddev() on columns of table "employees"
input employees_stddev_order_by {
  id: order_by
}

# aggregate stddev_pop on columns
type employees_stddev_pop_fields {
  id: Float
}

# order by stddev_pop() on columns of table "employees"
input employees_stddev_pop_order_by {
  id: order_by
}

# aggregate stddev_samp on columns
type employees_stddev_samp_fields {
  id: Float
}

# order by stddev_samp() on columns of table "employees"
input employees_stddev_samp_order_by {
  id: order_by
}

# aggregate sum on columns
type employees_sum_fields {
  id: Int
}

# order by sum() on columns of table "employees"
input employees_sum_order_by {
  id: order_by
}

# update columns of table "employees"
enum employees_update_column {
  # column name
  firstName

  # column name
  id

  # column name
  lastName

  # column name
  phone

  # column name
  photo
}

# aggregate var_pop on columns
type employees_var_pop_fields {
  id: Float
}

# order by var_pop() on columns of table "employees"
input employees_var_pop_order_by {
  id: order_by
}

# aggregate var_samp on columns
type employees_var_samp_fields {
  id: Float
}

# order by var_samp() on columns of table "employees"
input employees_var_samp_order_by {
  id: order_by
}

# aggregate variance on columns
type employees_variance_fields {
  id: Float
}

# order by variance() on columns of table "employees"
input employees_variance_order_by {
  id: order_by
}

# expression to compare columns of type Int. All fields are combined with logical 'AND'.
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

scalar json

# expression to compare columns of type json. All fields are combined with logical 'AND'.
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json!]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json!]
}

# columns and relationships of "locations"
type locations {
  id: Int!
  name: String!
}

# aggregated selection of "locations"
type locations_aggregate {
  aggregate: locations_aggregate_fields
  nodes: [locations!]!
}

# aggregate fields of "locations"
type locations_aggregate_fields {
  avg: locations_avg_fields
  count(columns: [locations_select_column!], distinct: Boolean): Int
  max: locations_max_fields
  min: locations_min_fields
  stddev: locations_stddev_fields
  stddev_pop: locations_stddev_pop_fields
  stddev_samp: locations_stddev_samp_fields
  sum: locations_sum_fields
  var_pop: locations_var_pop_fields
  var_samp: locations_var_samp_fields
  variance: locations_variance_fields
}

# order by aggregate values of table "locations"
input locations_aggregate_order_by {
  avg: locations_avg_order_by
  count: order_by
  max: locations_max_order_by
  min: locations_min_order_by
  stddev: locations_stddev_order_by
  stddev_pop: locations_stddev_pop_order_by
  stddev_samp: locations_stddev_samp_order_by
  sum: locations_sum_order_by
  var_pop: locations_var_pop_order_by
  var_samp: locations_var_samp_order_by
  variance: locations_variance_order_by
}

# input type for inserting array relation for remote table "locations"
input locations_arr_rel_insert_input {
  data: [locations_insert_input!]!
  on_conflict: locations_on_conflict
}

# aggregate avg on columns
type locations_avg_fields {
  id: Float
}

# order by avg() on columns of table "locations"
input locations_avg_order_by {
  id: order_by
}

# Boolean expression to filter rows from the table "locations". All fields are combined with a logical 'AND'.
input locations_bool_exp {
  _and: [locations_bool_exp]
  _not: locations_bool_exp
  _or: [locations_bool_exp]
  id: Int_comparison_exp
  name: String_comparison_exp
}

# unique or primary key constraints on table "locations"
enum locations_constraint {
  # unique or primary key constraint
  locations_pkey
}

# input type for incrementing integer column in table "locations"
input locations_inc_input {
  id: Int
}

# input type for inserting data into table "locations"
input locations_insert_input {
  id: Int
  name: String
}

# aggregate max on columns
type locations_max_fields {
  id: Int
  name: String
}

# order by max() on columns of table "locations"
input locations_max_order_by {
  id: order_by
  name: order_by
}

# aggregate min on columns
type locations_min_fields {
  id: Int
  name: String
}

# order by min() on columns of table "locations"
input locations_min_order_by {
  id: order_by
  name: order_by
}

# response of any mutation on the table "locations"
type locations_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [locations!]!
}

# input type for inserting object relation for remote table "locations"
input locations_obj_rel_insert_input {
  data: locations_insert_input!
  on_conflict: locations_on_conflict
}

# on conflict condition type for table "locations"
input locations_on_conflict {
  constraint: locations_constraint!
  update_columns: [locations_update_column!]!
  where: locations_bool_exp
}

# ordering options when selecting data from "locations"
input locations_order_by {
  id: order_by
  name: order_by
}

# primary key columns input for table: "locations"
input locations_pk_columns_input {
  id: Int!
}

# select columns of table "locations"
enum locations_select_column {
  # column name
  id

  # column name
  name
}

# input type for updating data in table "locations"
input locations_set_input {
  id: Int
  name: String
}

# aggregate stddev on columns
type locations_stddev_fields {
  id: Float
}

# order by stddev() on columns of table "locations"
input locations_stddev_order_by {
  id: order_by
}

# aggregate stddev_pop on columns
type locations_stddev_pop_fields {
  id: Float
}

# order by stddev_pop() on columns of table "locations"
input locations_stddev_pop_order_by {
  id: order_by
}

# aggregate stddev_samp on columns
type locations_stddev_samp_fields {
  id: Float
}

# order by stddev_samp() on columns of table "locations"
input locations_stddev_samp_order_by {
  id: order_by
}

# aggregate sum on columns
type locations_sum_fields {
  id: Int
}

# order by sum() on columns of table "locations"
input locations_sum_order_by {
  id: order_by
}

# update columns of table "locations"
enum locations_update_column {
  # column name
  id

  # column name
  name
}

# aggregate var_pop on columns
type locations_var_pop_fields {
  id: Float
}

# order by var_pop() on columns of table "locations"
input locations_var_pop_order_by {
  id: order_by
}

# aggregate var_samp on columns
type locations_var_samp_fields {
  id: Float
}

# order by var_samp() on columns of table "locations"
input locations_var_samp_order_by {
  id: order_by
}

# aggregate variance on columns
type locations_variance_fields {
  id: Float
}

# order by variance() on columns of table "locations"
input locations_variance_order_by {
  id: order_by
}

# mutation root
type mutation_root {
  # delete data from the table: "businesses"
  delete_businesses(
    # filter the rows which have to be deleted
    where: businesses_bool_exp!
  ): businesses_mutation_response

  # delete single row from the table: "businesses"
  delete_businesses_by_pk(id: Int!): businesses

  # delete data from the table: "clients"
  delete_clients(
    # filter the rows which have to be deleted
    where: clients_bool_exp!
  ): clients_mutation_response

  # delete single row from the table: "clients"
  delete_clients_by_pk(id: Int!): clients

  # delete data from the table: "employees"
  delete_employees(
    # filter the rows which have to be deleted
    where: employees_bool_exp!
  ): employees_mutation_response

  # delete single row from the table: "employees"
  delete_employees_by_pk(id: Int!): employees

  # delete data from the table: "locations"
  delete_locations(
    # filter the rows which have to be deleted
    where: locations_bool_exp!
  ): locations_mutation_response

  # delete single row from the table: "locations"
  delete_locations_by_pk(id: Int!): locations

  # delete data from the table: "services"
  delete_services(
    # filter the rows which have to be deleted
    where: services_bool_exp!
  ): services_mutation_response

  # delete single row from the table: "services"
  delete_services_by_pk(id: Int!): services

  # insert data into the table: "businesses"
  insert_businesses(
    # the rows to be inserted
    objects: [businesses_insert_input!]!

    # on conflict condition
    on_conflict: businesses_on_conflict
  ): businesses_mutation_response

  # insert a single row into the table: "businesses"
  insert_businesses_one(
    # the row to be inserted
    object: businesses_insert_input!

    # on conflict condition
    on_conflict: businesses_on_conflict
  ): businesses

  # insert data into the table: "clients"
  insert_clients(
    # the rows to be inserted
    objects: [clients_insert_input!]!

    # on conflict condition
    on_conflict: clients_on_conflict
  ): clients_mutation_response

  # insert a single row into the table: "clients"
  insert_clients_one(
    # the row to be inserted
    object: clients_insert_input!

    # on conflict condition
    on_conflict: clients_on_conflict
  ): clients

  # insert data into the table: "employees"
  insert_employees(
    # the rows to be inserted
    objects: [employees_insert_input!]!

    # on conflict condition
    on_conflict: employees_on_conflict
  ): employees_mutation_response

  # insert a single row into the table: "employees"
  insert_employees_one(
    # the row to be inserted
    object: employees_insert_input!

    # on conflict condition
    on_conflict: employees_on_conflict
  ): employees

  # insert data into the table: "locations"
  insert_locations(
    # the rows to be inserted
    objects: [locations_insert_input!]!

    # on conflict condition
    on_conflict: locations_on_conflict
  ): locations_mutation_response

  # insert a single row into the table: "locations"
  insert_locations_one(
    # the row to be inserted
    object: locations_insert_input!

    # on conflict condition
    on_conflict: locations_on_conflict
  ): locations

  # insert data into the table: "services"
  insert_services(
    # the rows to be inserted
    objects: [services_insert_input!]!

    # on conflict condition
    on_conflict: services_on_conflict
  ): services_mutation_response

  # insert a single row into the table: "services"
  insert_services_one(
    # the row to be inserted
    object: services_insert_input!

    # on conflict condition
    on_conflict: services_on_conflict
  ): services

  # update data of the table: "businesses"
  update_businesses(
    # increments the integer columns with given value of the filtered values
    _inc: businesses_inc_input

    # sets the columns of the filtered rows to the given values
    _set: businesses_set_input

    # filter the rows which have to be updated
    where: businesses_bool_exp!
  ): businesses_mutation_response

  # update single row of the table: "businesses"
  update_businesses_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: businesses_inc_input

    # sets the columns of the filtered rows to the given values
    _set: businesses_set_input
    pk_columns: businesses_pk_columns_input!
  ): businesses

  # update data of the table: "clients"
  update_clients(
    # increments the integer columns with given value of the filtered values
    _inc: clients_inc_input

    # sets the columns of the filtered rows to the given values
    _set: clients_set_input

    # filter the rows which have to be updated
    where: clients_bool_exp!
  ): clients_mutation_response

  # update single row of the table: "clients"
  update_clients_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: clients_inc_input

    # sets the columns of the filtered rows to the given values
    _set: clients_set_input
    pk_columns: clients_pk_columns_input!
  ): clients

  # update data of the table: "employees"
  update_employees(
    # increments the integer columns with given value of the filtered values
    _inc: employees_inc_input

    # sets the columns of the filtered rows to the given values
    _set: employees_set_input

    # filter the rows which have to be updated
    where: employees_bool_exp!
  ): employees_mutation_response

  # update single row of the table: "employees"
  update_employees_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: employees_inc_input

    # sets the columns of the filtered rows to the given values
    _set: employees_set_input
    pk_columns: employees_pk_columns_input!
  ): employees

  # update data of the table: "locations"
  update_locations(
    # increments the integer columns with given value of the filtered values
    _inc: locations_inc_input

    # sets the columns of the filtered rows to the given values
    _set: locations_set_input

    # filter the rows which have to be updated
    where: locations_bool_exp!
  ): locations_mutation_response

  # update single row of the table: "locations"
  update_locations_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: locations_inc_input

    # sets the columns of the filtered rows to the given values
    _set: locations_set_input
    pk_columns: locations_pk_columns_input!
  ): locations

  # update data of the table: "services"
  update_services(
    # increments the integer columns with given value of the filtered values
    _inc: services_inc_input

    # sets the columns of the filtered rows to the given values
    _set: services_set_input

    # filter the rows which have to be updated
    where: services_bool_exp!
  ): services_mutation_response

  # update single row of the table: "services"
  update_services_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: services_inc_input

    # sets the columns of the filtered rows to the given values
    _set: services_set_input
    pk_columns: services_pk_columns_input!
  ): services

  # perform the action: "upload_avatar"
  upload_avatar(base64Image: String!, userId: String!): AvatarUploadResult
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

# query root
type query_root {
  # fetch data from the table: "businesses"
  businesses(
    # distinct select on columns
    distinct_on: [businesses_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [businesses_order_by!]

    # filter the rows returned
    where: businesses_bool_exp
  ): [businesses!]!

  # fetch aggregated fields from the table: "businesses"
  businesses_aggregate(
    # distinct select on columns
    distinct_on: [businesses_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [businesses_order_by!]

    # filter the rows returned
    where: businesses_bool_exp
  ): businesses_aggregate!

  # fetch data from the table: "businesses" using primary key columns
  businesses_by_pk(id: Int!): businesses

  # fetch data from the table: "clients"
  clients(
    # distinct select on columns
    distinct_on: [clients_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [clients_order_by!]

    # filter the rows returned
    where: clients_bool_exp
  ): [clients!]!

  # fetch aggregated fields from the table: "clients"
  clients_aggregate(
    # distinct select on columns
    distinct_on: [clients_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [clients_order_by!]

    # filter the rows returned
    where: clients_bool_exp
  ): clients_aggregate!

  # fetch data from the table: "clients" using primary key columns
  clients_by_pk(id: Int!): clients

  # fetch data from the table: "employees"
  employees(
    # distinct select on columns
    distinct_on: [employees_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [employees_order_by!]

    # filter the rows returned
    where: employees_bool_exp
  ): [employees!]!

  # fetch aggregated fields from the table: "employees"
  employees_aggregate(
    # distinct select on columns
    distinct_on: [employees_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [employees_order_by!]

    # filter the rows returned
    where: employees_bool_exp
  ): employees_aggregate!

  # fetch data from the table: "employees" using primary key columns
  employees_by_pk(id: Int!): employees

  # fetch data from the table: "locations"
  locations(
    # distinct select on columns
    distinct_on: [locations_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [locations_order_by!]

    # filter the rows returned
    where: locations_bool_exp
  ): [locations!]!

  # fetch aggregated fields from the table: "locations"
  locations_aggregate(
    # distinct select on columns
    distinct_on: [locations_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [locations_order_by!]

    # filter the rows returned
    where: locations_bool_exp
  ): locations_aggregate!

  # fetch data from the table: "locations" using primary key columns
  locations_by_pk(id: Int!): locations

  # fetch data from the table: "services"
  services(
    # distinct select on columns
    distinct_on: [services_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [services_order_by!]

    # filter the rows returned
    where: services_bool_exp
  ): [services!]!

  # fetch aggregated fields from the table: "services"
  services_aggregate(
    # distinct select on columns
    distinct_on: [services_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [services_order_by!]

    # filter the rows returned
    where: services_bool_exp
  ): services_aggregate!

  # fetch data from the table: "services" using primary key columns
  services_by_pk(id: Int!): services
}

# columns and relationships of "services"
type services {
  id: Int!
  name: String!
}

# aggregated selection of "services"
type services_aggregate {
  aggregate: services_aggregate_fields
  nodes: [services!]!
}

# aggregate fields of "services"
type services_aggregate_fields {
  avg: services_avg_fields
  count(columns: [services_select_column!], distinct: Boolean): Int
  max: services_max_fields
  min: services_min_fields
  stddev: services_stddev_fields
  stddev_pop: services_stddev_pop_fields
  stddev_samp: services_stddev_samp_fields
  sum: services_sum_fields
  var_pop: services_var_pop_fields
  var_samp: services_var_samp_fields
  variance: services_variance_fields
}

# order by aggregate values of table "services"
input services_aggregate_order_by {
  avg: services_avg_order_by
  count: order_by
  max: services_max_order_by
  min: services_min_order_by
  stddev: services_stddev_order_by
  stddev_pop: services_stddev_pop_order_by
  stddev_samp: services_stddev_samp_order_by
  sum: services_sum_order_by
  var_pop: services_var_pop_order_by
  var_samp: services_var_samp_order_by
  variance: services_variance_order_by
}

# input type for inserting array relation for remote table "services"
input services_arr_rel_insert_input {
  data: [services_insert_input!]!
  on_conflict: services_on_conflict
}

# aggregate avg on columns
type services_avg_fields {
  id: Float
}

# order by avg() on columns of table "services"
input services_avg_order_by {
  id: order_by
}

# Boolean expression to filter rows from the table "services". All fields are combined with a logical 'AND'.
input services_bool_exp {
  _and: [services_bool_exp]
  _not: services_bool_exp
  _or: [services_bool_exp]
  id: Int_comparison_exp
  name: String_comparison_exp
}

# unique or primary key constraints on table "services"
enum services_constraint {
  # unique or primary key constraint
  services_pkey
}

# input type for incrementing integer column in table "services"
input services_inc_input {
  id: Int
}

# input type for inserting data into table "services"
input services_insert_input {
  id: Int
  name: String
}

# aggregate max on columns
type services_max_fields {
  id: Int
  name: String
}

# order by max() on columns of table "services"
input services_max_order_by {
  id: order_by
  name: order_by
}

# aggregate min on columns
type services_min_fields {
  id: Int
  name: String
}

# order by min() on columns of table "services"
input services_min_order_by {
  id: order_by
  name: order_by
}

# response of any mutation on the table "services"
type services_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [services!]!
}

# input type for inserting object relation for remote table "services"
input services_obj_rel_insert_input {
  data: services_insert_input!
  on_conflict: services_on_conflict
}

# on conflict condition type for table "services"
input services_on_conflict {
  constraint: services_constraint!
  update_columns: [services_update_column!]!
  where: services_bool_exp
}

# ordering options when selecting data from "services"
input services_order_by {
  id: order_by
  name: order_by
}

# primary key columns input for table: "services"
input services_pk_columns_input {
  id: Int!
}

# select columns of table "services"
enum services_select_column {
  # column name
  id

  # column name
  name
}

# input type for updating data in table "services"
input services_set_input {
  id: Int
  name: String
}

# aggregate stddev on columns
type services_stddev_fields {
  id: Float
}

# order by stddev() on columns of table "services"
input services_stddev_order_by {
  id: order_by
}

# aggregate stddev_pop on columns
type services_stddev_pop_fields {
  id: Float
}

# order by stddev_pop() on columns of table "services"
input services_stddev_pop_order_by {
  id: order_by
}

# aggregate stddev_samp on columns
type services_stddev_samp_fields {
  id: Float
}

# order by stddev_samp() on columns of table "services"
input services_stddev_samp_order_by {
  id: order_by
}

# aggregate sum on columns
type services_sum_fields {
  id: Int
}

# order by sum() on columns of table "services"
input services_sum_order_by {
  id: order_by
}

# update columns of table "services"
enum services_update_column {
  # column name
  id

  # column name
  name
}

# aggregate var_pop on columns
type services_var_pop_fields {
  id: Float
}

# order by var_pop() on columns of table "services"
input services_var_pop_order_by {
  id: order_by
}

# aggregate var_samp on columns
type services_var_samp_fields {
  id: Float
}

# order by var_samp() on columns of table "services"
input services_var_samp_order_by {
  id: order_by
}

# aggregate variance on columns
type services_variance_fields {
  id: Float
}

# order by variance() on columns of table "services"
input services_variance_order_by {
  id: order_by
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# subscription root
type subscription_root {
  # fetch data from the table: "businesses"
  businesses(
    # distinct select on columns
    distinct_on: [businesses_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [businesses_order_by!]

    # filter the rows returned
    where: businesses_bool_exp
  ): [businesses!]!

  # fetch aggregated fields from the table: "businesses"
  businesses_aggregate(
    # distinct select on columns
    distinct_on: [businesses_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [businesses_order_by!]

    # filter the rows returned
    where: businesses_bool_exp
  ): businesses_aggregate!

  # fetch data from the table: "businesses" using primary key columns
  businesses_by_pk(id: Int!): businesses

  # fetch data from the table: "clients"
  clients(
    # distinct select on columns
    distinct_on: [clients_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [clients_order_by!]

    # filter the rows returned
    where: clients_bool_exp
  ): [clients!]!

  # fetch aggregated fields from the table: "clients"
  clients_aggregate(
    # distinct select on columns
    distinct_on: [clients_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [clients_order_by!]

    # filter the rows returned
    where: clients_bool_exp
  ): clients_aggregate!

  # fetch data from the table: "clients" using primary key columns
  clients_by_pk(id: Int!): clients

  # fetch data from the table: "employees"
  employees(
    # distinct select on columns
    distinct_on: [employees_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [employees_order_by!]

    # filter the rows returned
    where: employees_bool_exp
  ): [employees!]!

  # fetch aggregated fields from the table: "employees"
  employees_aggregate(
    # distinct select on columns
    distinct_on: [employees_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [employees_order_by!]

    # filter the rows returned
    where: employees_bool_exp
  ): employees_aggregate!

  # fetch data from the table: "employees" using primary key columns
  employees_by_pk(id: Int!): employees

  # fetch data from the table: "locations"
  locations(
    # distinct select on columns
    distinct_on: [locations_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [locations_order_by!]

    # filter the rows returned
    where: locations_bool_exp
  ): [locations!]!

  # fetch aggregated fields from the table: "locations"
  locations_aggregate(
    # distinct select on columns
    distinct_on: [locations_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [locations_order_by!]

    # filter the rows returned
    where: locations_bool_exp
  ): locations_aggregate!

  # fetch data from the table: "locations" using primary key columns
  locations_by_pk(id: Int!): locations

  # fetch data from the table: "services"
  services(
    # distinct select on columns
    distinct_on: [services_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [services_order_by!]

    # filter the rows returned
    where: services_bool_exp
  ): [services!]!

  # fetch aggregated fields from the table: "services"
  services_aggregate(
    # distinct select on columns
    distinct_on: [services_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [services_order_by!]

    # filter the rows returned
    where: services_bool_exp
  ): services_aggregate!

  # fetch data from the table: "services" using primary key columns
  services_by_pk(id: Int!): services
}

scalar timestamptz

scalar uuid

