{"version":3,"sources":["serverAPI/serverAPI.ts","Components/FormAddClients/FormAddClients.tsx","Components/ClientsList/Client/ClientForm.tsx","Components/ClientsList/Client/Client.tsx","Components/ClientsList/ClientsList.tsx","App.tsx","index.tsx"],"names":["endpoint","getClients","query","gql","request","then","data","addClient","variable","mutation","updateClient","formatToRequestForm","requestForm","i","length","FormAddClient","useForm","register","handleSubmit","setValue","errors","queryClient","useQueryClient","useMutation","onSuccess","invalidateQueries","className","onSubmit","e","newData","key","mutate","id","ref","required","type","name","firstName","message","lastName","ClientForm","client","index","editClient","o1","o2","p","hasOwnProperty","compareObjects","alt","defaultValue","avatarUrl","autoFocus","phone","value","ClientItem","useState","editMode","setEditMode","onDoubleClick","src","ClientsList","clients","isLoading","map","el","Client","QueryClient","defaultOptions","queries","refetchOnWindowFocus","Wrapper","useQuery","status","sortData","sort","a","b","href","FormAddClients","App","QueryClientProvider","initialIsOpen","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.098354b5.chunk.js","sourcesContent":["import { request, gql } from \"graphql-request\";\r\nexport type Client = {\r\n  id: number\r\n  firstName: string\r\n  lastName: string\r\n  phone?: string\r\n  avatarUrl?: string\r\n}\r\ntype GetClients = {\r\n  getClients: Array<Client>\r\n}\r\n\r\nconst endpoint = 'https://test-task.expane.pro/api/graphql'\r\n\r\nexport const getClients = () => {\r\n  const query = gql`\r\n    {\r\n      getClients{\r\n        id\r\n        firstName\r\n        lastName\r\n        phone\r\n        avatarUrl\r\n      }\r\n    }\r\n  `;\r\n  return request<GetClients>(endpoint, query).then(data => data.getClients)\r\n}\r\n\r\nexport type AddClient = {\r\n  firstName: string\r\n  lastName: string\r\n  phone?: string\r\n  avatarUrl?: string\r\n}\r\n\r\ntype AddClientRes = {\r\n  addClient: {\r\n    id: number\r\n  }\r\n}\r\n\r\nexport const addClient = (variable: AddClient) => {\r\n  const mutation = gql`\r\n  mutation testAddClient($firstName: String!\r\n    $lastName: String!\r\n    $phone: String\r\n    $avatarUrl: String){\r\n    addClient(firstName: $firstName, lastName: $lastName, phone: $phone, avatarUrl: $avatarUrl){\r\n      id\r\n    }\r\n  }\r\n  `;\r\n  return request<AddClientRes>(endpoint, mutation, variable).then(data => data.addClient)\r\n}\r\n\r\nexport type UpdateClient = {\r\n  updateClient: {\r\n    id: number\r\n    firstName?: string\r\n    lastName?: string\r\n    phone?: string\r\n    avatarUrl?: string\r\n  }\r\n}\r\n\r\nexport const updateClient = (variable: Client) => {\r\n  const mutation = gql`\r\n  mutation testUpdateClient(\r\n    $id: ID!\r\n    $firstName: String!\r\n    $lastName: String!\r\n    $phone: String\r\n    $avatarUrl: String){\r\n    updateClient(id: $id, firstName: $firstName, lastName: $lastName, phone: $phone, avatarUrl: $avatarUrl){\r\n      id\r\n      firstName\r\n      lastName\r\n      phone\r\n      avatarUrl\r\n    }\r\n  }\r\n  `;\r\n  return request<UpdateClient>(endpoint, mutation, variable).then(data => data.updateClient)\r\n}","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\"\r\nimport { useMutation, useQueryClient } from \"react-query\";\r\nimport { AddClient, addClient } from \"../../serverAPI/serverAPI\";\r\n\r\nexport const formatToRequestForm = (data: any) => {\r\n  const requestForm: any = {}\r\n  for (let i in data) {\r\n    if (!data[i].length) {\r\n      requestForm[i] = null\r\n    } else {\r\n      requestForm[i] = data[i]\r\n    }\r\n  }\r\n  return requestForm\r\n}\r\n\r\nconst FormAddClient = () => {\r\n  const { register, handleSubmit, setValue, errors } = useForm();\r\n  const queryClient = useQueryClient()\r\n\r\n  const mutation = useMutation(addClient, {\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries(\"clients\")\r\n    },\r\n  })\r\n\r\n  const submitNewClient = (e: AddClient) => {\r\n    const newData = formatToRequestForm(e)\r\n    mutation.mutate(newData)\r\n    for (let key in e) {\r\n      setValue(key, \"\")\r\n    }\r\n    // setValue(\"firstName\", \"\")\r\n    // setValue(\"lastName\", \"\")\r\n    // setValue(\"phone\", \"\")\r\n    // setValue(\"avatarUrl\", \"\")\r\n  }\r\n\r\n  return (\r\n    <form className=\"border mt-10\" onSubmit={handleSubmit(submitNewClient)} id=\"form\">\r\n      <div className=\"shadow overflow-hidden sm:rounded-md\">\r\n        <div className=\"p-4 bg-white\">\r\n          <div className=\"grid grid-cols-6 gap-4\">\r\n            <div className=\"col-span-6 sm:col-span-3\">\r\n              <label className=\"block text-sm font-medium text-gray-700\">\r\n                First name\r\n              </label>\r\n              <input ref={register({\r\n                required: \"required field\"\r\n              })}\r\n                type=\"text\"\r\n                name=\"firstName\"\r\n                className={\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\" + (errors.firstName?.message ? \" border-red-500\" : \"\")}\r\n              />\r\n              {errors.firstName?.message ? <span className=\"text-red-500\">{errors.firstName?.message}</span> : null}\r\n            </div>\r\n\r\n            <div className=\"col-span-6 sm:col-span-3\">\r\n              <label className=\"block text-sm font-medium text-gray-700\">\r\n                Last name\r\n              </label>\r\n              <input ref={register({\r\n                required: \"required field\"\r\n              })}\r\n                type=\"text\"\r\n                name=\"lastName\"\r\n                className={\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\" + (errors.lastName?.message ? \" border-red-500\" : \"\")}\r\n              />\r\n              {errors.lastName?.message ? <span className=\"text-red-500\">{errors.lastName?.message}</span> : null}\r\n            </div>\r\n\r\n            <div className=\"col-span-6 sm:col-span-3\">\r\n              <label className=\"block text-sm font-medium text-gray-700\">\r\n                Phone\r\n              </label>\r\n              <input ref={register}\r\n                type=\"tel\"\r\n                name=\"phone\"\r\n                className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-span-6 sm:col-span-3\">\r\n              <label className=\"block text-sm font-medium text-gray-700\">\r\n                Avatar Url\r\n              </label>\r\n              <input ref={register}\r\n                type=\"url\"\r\n                name=\"avatarUrl\"\r\n                className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"p-4 bg-gray-50 text-right\">\r\n          <button className=\"inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\r\n            ADD\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default FormAddClient;\r\n","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useMutation, useQueryClient } from \"react-query\";\r\nimport { Client, updateClient } from \"../../../serverAPI/serverAPI\";\r\nimport { formatToRequestForm } from \"../../FormAddClients/FormAddClients\";\r\n\r\ntype PropsType = {\r\n  client: Client;\r\n  index: number;\r\n  editClient: () => void\r\n};\r\n\r\nconst compareObjects = (o1: any, o2: any) => {\r\n  for (let p in o1) {\r\n    if (o1.hasOwnProperty(p)) {\r\n      if (o1[p] !== o2[p]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  for (let p in o2) {\r\n    if (o2.hasOwnProperty(p)) {\r\n      if (o1[p] !== o2[p]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nconst ClientForm: React.FC<PropsType> = ({ client, index, editClient }) => {\r\n  const { register, handleSubmit } = useForm();\r\n\r\n  const queryClient = useQueryClient()\r\n  const mutation = useMutation(updateClient, {\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries(\"clients\")\r\n    },\r\n  })\r\n\r\n  const subUpdateClient = (e: any) => {\r\n    const newData = formatToRequestForm(e)\r\n    if (!compareObjects(newData, client)) {\r\n      mutation.mutate(newData)\r\n    }\r\n    editClient()\r\n  }\r\n\r\n  return (\r\n    <form\r\n      className={\r\n        (index % 2 ? \"bg-blue-50 \" : \"bg-blue-100 \") +\r\n        \"flex justify-between bg-gray-300 divide-x divide-black hover:bg-blue-200\"\r\n      }\r\n      onSubmit={handleSubmit(subUpdateClient)}\r\n    >\r\n      <input\r\n        ref={register}\r\n        type=\"text\"\r\n        className=\"p-4 flex-initial w-2/12 p-1 flex justify-center items-center\"\r\n        name=\"avatarUrl\"\r\n        alt=\"avatar\"\r\n        defaultValue={client.avatarUrl}\r\n      />\r\n      <input\r\n        ref={register}\r\n        type=\"text\"\r\n        className=\"p-4 flex-initial w-3/12 p-1 flex justify-center items-center\"\r\n        autoFocus\r\n        name=\"firstName\"\r\n        defaultValue={client.firstName}\r\n      />\r\n      <input\r\n        ref={register}\r\n        type=\"text\"\r\n        className=\"p-4 flex-initial w-3/12 p-1 flex justify-center items-center\"\r\n        name=\"lastName\"\r\n        defaultValue={client.lastName}\r\n      />\r\n      <input\r\n        ref={register}\r\n        type=\"text\"\r\n        className=\"p-4 flex-initial w-4/12 p-1 flex justify-center items-center\"\r\n        name=\"phone\"\r\n        defaultValue={client.phone}\r\n      />\r\n      <input\r\n        ref={register}\r\n        type=\"text\"\r\n        className=\"hidden\"\r\n        name=\"id\"\r\n        defaultValue={client.id}\r\n      />\r\n      <input className=\"hidden\" type=\"submit\" value=\"sub\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ClientForm;\r\n","import React, { useState } from \"react\";\r\nimport { Client } from \"../../../serverAPI/serverAPI\";\r\nimport ClientForm from \"./ClientForm\";\r\n\r\ntype PropsType = {\r\n  client: Client;\r\n  index: number;\r\n};\r\n\r\nconst defaultAva =\r\n  \"https://iconape.com/wp-content/png_logo_vector/avatar-4.png\";\r\n\r\nconst ClientItem: React.FC<PropsType> = ({ client, index }) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  const editClient = () => {\r\n    setEditMode(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      { editMode ? <ClientForm client={client} index={index} editClient={editClient} /> : (<div\r\n        className={\r\n          (index % 2 ? \"bg-blue-50 \" : \"bg-blue-100 \") +\r\n          \"flex justify-between bg-gray-300 divide-x divide-black hover:bg-blue-200 h-20\"\r\n        }\r\n\r\n        onDoubleClick={() => {\r\n          setEditMode(true);\r\n        }}\r\n      >\r\n        <div className=\"p-4 flex-initial w-2/12 p-1 flex justify-center items-center\">\r\n          <img\r\n            className=\"max-h-20 my-0 mx-auto\"\r\n            src={client.avatarUrl ? client.avatarUrl : defaultAva}\r\n            alt=\"avatar\"\r\n          />\r\n        </div>\r\n        <div className=\"p-4 flex-initial w-3/12 p-1 flex justify-center items-center\">\r\n          {client.firstName}\r\n        </div>\r\n        <div className=\"p-4 flex-initial w-3/12 p-1 flex justify-center items-center\">\r\n          {client.lastName}\r\n        </div>\r\n        <div className=\"p-4 flex-initial w-4/12 p-1 flex justify-center items-center\">\r\n          {client.phone}\r\n        </div>\r\n      </div>)\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ClientItem;\r\n","import React from \"react\";\r\nimport { Client } from \"../../serverAPI/serverAPI\";\r\nimport ClientItem from \"./Client/Client\";\r\n\r\ntype PropsType = {\r\n  isLoading: boolean\r\n  clients: Array<Client> | undefined\r\n}\r\n\r\n\r\nconst ClientsList: React.FC<PropsType> = ({ clients, isLoading }) => {\r\n\r\n  return (\r\n    <div className=\"border border-black min-w-max\">\r\n      <div className=\"flex justify-between bg-gray-300 divide-x divide-black border-b-2 border-black \">\r\n        <div className=\"p-4 flex-initial w-2/12 p-1 text-center\">Avatar</div>\r\n        <div className=\"p-4 flex-initial w-3/12 p-1 text-center\">FirstName</div>\r\n        <div className=\"p-4 flex-initial w-3/12 p-1 text-center\">LastName</div>\r\n        <div className=\"p-4 flex-initial w-4/12 p-1 text-center\">Phone</div>\r\n      </div>\r\n      <div>\r\n        {isLoading ?\r\n          <span className=\"block text-xl font-bolt text-center p-4\">Loading...</span>\r\n          : clients?.map((el, index) => <ClientItem client={el} index={index} key={el.id} />)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ClientsList;\r\n","import React from \"react\";\r\nimport { QueryClient, QueryClientProvider, useQuery } from \"react-query\";\r\nimport { ReactQueryDevtools } from 'react-query/devtools'\r\nimport ClientsList from \"./Components/ClientsList/ClientsList\";\r\nimport FormAddClients from \"./Components/FormAddClients/FormAddClients\";\r\nimport { getClients } from \"./serverAPI/serverAPI\";\r\n\r\nconst queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      refetchOnWindowFocus: false,\r\n    },\r\n  },\r\n})\r\n\r\nconst App = () => {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <Wrapper />\r\n      <ReactQueryDevtools initialIsOpen={false} />\r\n    </QueryClientProvider>\r\n  );\r\n}\r\n\r\nconst Wrapper = () => {\r\n  const { isLoading, data, status } = useQuery(\"clients\", getClients, { refetchOnWindowFocus: false })\r\n\r\n  const sortData = data?.sort((a, b) => a.id > b.id ? 1 : -1)\r\n\r\n  if (status === \"error\") {\r\n    return (\r\n      <div className=\"p-4\">\r\n        <h1>Error querying</h1>\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h1 className=\"text-2xl font-bolt text-center\">List of Clients</h1>\r\n      <div className=\"p-4 text-right\">\r\n        <a href=\"#form\" className=\"inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\r\n          GO TO ADD\r\n          </a>\r\n      </div>\r\n      <ClientsList isLoading={isLoading} clients={sortData} />\r\n      <FormAddClients />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}